{"version":3,"sources":["src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAM,qBAAqB,GAAG,SAAxB,qBAAwB,CAC5B,OAD4B,EAE5B,GAF4B,EAG5B,UAH4B,EAGN;AAAtB,MAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAsB,GAAA,CAEtB;;;AACA,MAAK,OAAO,IAAI,OAAO,CAAC,MAAR,GAAiB,CAA7B,IAAmC,KAAK,CAAC,GAAD,CAA5C,EAAmD;AACjD,WAAO,eAAP;AACD,GALqB,CAOtB;;;AACA,MAAI,UAAU,KAAK,OAAO,CAAC,MAA3B,EAAmC;AACjC,WAAO,gBAAP;AACD,GAVqB,CAYtB;AACA;;;AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAR,CAAc,CAAd,EAAiB,MAAjB,CAAwB,UAAC,GAAD,EAAM,MAAN,EAAc,WAAd,EAA2B,GAA3B,EAA8B;AACrE,IAAA,GAAG,CAAC,UAAJ,GAAiB,UAAjB;;AACA,QACE,GAAG,CAAC,GAAG,CAAC,UAAL,CAAH,KAAwB,MAAxB,IACA,GAAG,CAAC,GAAG,CAAC,UAAL,CAAH,GAAsB,MAAtB,KAAiC,GAFnC,EAGE;AACA,MAAA,GAAG,CAAC,WAAJ,GAAkB,WAAlB;AACA,MAAA,GAAG,CAAC,MAAJ,CAAW,WAAX;AACD;;AACD,WAAO,GAAP;AACD,GAVgB,EAUd,EAVc,CAAjB;;AAYA,MAAI,QAAQ,CAAC,WAAb,EAA0B;AACxB,WAAO,2BAAyB,QAAQ,CAAC,UAAlC,GAA4C,QAA5C,GACL,QAAQ,CAAC,WADX;AAGD,GAJD,MAIO;AACL;AACA,WAAO,qBAAqB,CAAC,OAAD,EAAU,GAAV,EAAe,UAAU,GAAG,CAA5B,CAA5B;AACD;AACF,CArCD;;AAuCA,IAAM,QAAQ,GAAG,qBAAqB,CAAC,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,EAAW,EAAX,CAAD,EAAiB,CAAjB,CAAtC;AAEA,QAAQ,CAAC,cAAT,CAAwB,KAAxB,EAA+B,SAA/B,GAA2C,aACnC,QADmC,GAC3B,6GADhB","file":"src.f10117fe.map","sourceRoot":"..","sourcesContent":["const findSumMatchRecursive = (\n  numbers: number[],\n  sum: number,\n  firstIndex: number = 0\n) => {\n  // Simple input validation\n  if ((numbers && numbers.length < 2) || isNaN(sum)) {\n    return \"Invalid Input\";\n  }\n\n  // Stop the iteration once all array indexes have been covered\n  if (firstIndex === numbers.length) {\n    return \"No match found\";\n  }\n\n  // Here, we interate over the array without mutating the initail array.\n  // We create a copy of initial array with  numbers.slice(0)\n  const solution = numbers.slice(0).reduce((acc, number, secondIndex, arr) => {\n    acc.firstIndex = firstIndex;\n    if (\n      arr[acc.firstIndex] !== number &&\n      arr[acc.firstIndex] + number === sum\n    ) {\n      acc.secondIndex = secondIndex;\n      arr.splice(secondIndex);\n    }\n    return acc;\n  }, {});\n\n  if (solution.secondIndex) {\n    return `Matching indexes are: ${solution.firstIndex}  and ${\n      solution.secondIndex\n    }`;\n  } else {\n    // We recall our function.\n    return findSumMatchRecursive(numbers, sum, firstIndex + 1);\n  }\n};\n\nconst solution = findSumMatchRecursive([11, 2, 7, 15], 9);\n\ndocument.getElementById(\"app\").innerHTML = `\n  <h1>${solution}</h1>\n  <h4>Open the index.ts file in the src folder on 2nd left panel to play around with the code</h4>\n`;\n"]}